#!/bin/bash
#
# Nome do Arquivo: main.sh
#
# Descri√ß√£o:
#   Ponto de entrada principal para o sistema de gerenciamento de servidor.
#   Este script foi refatorado para utilizar uma estrutura modular, seguindo
#   as melhores pr√°ticas de desenvolvimento e os padr√µes definidos em AGENTS.md.
#
# Estrutura:
#   - src/ui/         # Interface com o usu√°rio (menus, di√°logos)
#   - src/core/       # L√≥gica principal e inicializa√ß√£o
#   - src/modules/    # M√≥dulos de funcionalidades espec√≠ficas
#
# Uso:
#   sudo ./main.sh [op√ß√µes]
#
# Op√ß√µes:
#   -h, --help      Mostra esta ajuda
#   -v, --verbose   Modo verboso (mais detalhes na sa√≠da)
#   -d, --dry-run   Simula as altera√ß√µes sem aplic√°-las
#
# Autor: Equipe de Infraestrutura
# Data: 2025-07-06
# Vers√£o: 2.0.0
#
# Hist√≥rico de Altera√ß√µes:
#   2025-07-06 - Vers√£o 2.0.0 - Refatora√ß√£o para estrutura modular
#   2025-07-06 - Vers√£o 1.0.0 - Vers√£o inicial
#
# Depend√™ncias:
#   - Bash 4.0+
#   - M√≥dulos em src/core/ e src/ui/
#   - Permiss√µes de superusu√°rio (recomendado)

# Obter diret√≥rio do script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Carregar m√≥dulo de inicializa√ß√£o
if [ -f "${SCRIPT_DIR}/src/core/initialization.sh" ]; then
    # shellcheck source=/dev/null
    source "${SCRIPT_DIR}/src/core/initialization.sh"
else
    echo "Erro: N√£o foi poss√≠vel carregar o m√≥dulo de inicializa√ß√£o." >&2
    exit 1
fi

# Ponto de entrada principal
initialize

# Configurar tratamento de erros
trap 'error_handler $? $LINENO' ERR

# Diret√≥rios base
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CORE_DIR="${SCRIPT_DIR}/core"
MODULES_DIR="${SCRIPT_DIR}/modules"
BIN_DIR="${SCRIPT_DIR}/bin"

# Verificar e carregar fun√ß√µes do core
if [[ -d "${CORE_DIR}" ]]; then
    for core_file in "${CORE_DIR}"/*.sh; do
        source "${core_file}"
    done
else
    echo "Erro: Diret√≥rio core n√£o encontrado em ${CORE_DIR}" >&2
    exit 1
fi

# Configura√ß√£o de cores
COLOR_RED="\033[0;31m"
COLOR_GREEN="\033[0;32m"
COLOR_YELLOW="\033[0;33m"
COLOR_BLUE="\033[0;34m"
COLOR_RESET="\033[0m"

# Vari√°veis globais
DRY_RUN=false
VERBOSE=false
BACKUP_DIR="${SCRIPT_DIR}/backups"
LOG_DIR="${SCRIPT_DIR}/logs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="${LOG_DIR}/security_hardening_${TIMESTAMP}.log"

# Criar diret√≥rios necess√°rios
mkdir -p "${BACKUP_DIR}" "${LOG_DIR}"

#
# BLOCO: Interface de Usu√°rio
#
# Prop√≥sito:
#   Fun√ß√µes respons√°veis pela exibi√ß√£o e intera√ß√£o com o usu√°rio,
#   incluindo menus, cabe√ßalhos e mensagens formatadas.
#
# Contexto:
#   - Utiliza vari√°veis de cor para melhorar a legibilidade
#   - Centraliza a formata√ß√£o de sa√≠da
#   - Mant√©m consist√™ncia visual em toda a aplica√ß√£o
#
# Exce√ß√µes:
#   - N√£o deve conter l√≥gica de neg√≥cio
#   - Deve ser independente de outras partes do sistema
#

#
# Fun√ß√£o: show_header
#
# Descri√ß√£o:
#   Exibe o cabe√ßalho formatado do sistema no terminal.
#   Inclui informa√ß√µes de vers√£o, data e hora atuais.
#
# Par√¢metros:
#   Nenhum
#
# Retorno:
#   Nenhum (exibe sa√≠da formatada no terminal)
#
# Exemplo:
#   show_header
#
show_header() {
    clear
    echo -e "${COLOR_BLUE}==================================================${COLOR_RESET}"
    echo -e "${COLOR_BLUE}    SISTEMA DE GERENCIAMENTO DE SERVIDOR          ${COLOR_RESET}"
    echo -e "${COLOR_BLUE}==================================================${COLOR_RESET}"
    echo -e "${COLOR_BLUE}  Vers√£o: 1.0.0${COLOR_RESET}"
    echo -e "${COLOR_BLUE}  Data: $(date +'%d/%m/%Y %H:%M:%S')${COLOR_RESET}"
    echo -e "${COLOR_BLUE}==================================================${COLOR_RESET}\n"
}

#
# Fun√ß√£o: show_menu
#
# Descri√ß√£o:
#   Exibe o menu principal do sistema com op√ß√µes numeradas.
#   Interface prim√°ria para navega√ß√£o do usu√°rio.
#
# Fluxo:
#   1. Limpa a tela e exibe o cabe√ßalho
#   2. Mostra as op√ß√µes dispon√≠veis
#   3. Aguarda a sele√ß√£o do usu√°rio
#
# Op√ß√µes:
#   1. Seguran√ßa do Sistema - Acessa o menu de seguran√ßa
#   2. Gerenciar CapRover - Acessa o menu do CapRover
#   3. Configura√ß√µes do Sistema - Acessa configura√ß√µes avan√ßadas
#   4. Ferramentas Avan√ßadas - Acessa utilit√°rios avan√ßados
#   5. Sair - Encerra a aplica√ß√£o
#
# Retorno:
#   Nenhum (exibe o menu no terminal)
#
show_menu() {
    show_header
    echo -e "${COLOR_BLUE}MENU PRINCIPAL${COLOR_RESET}"
    echo -e "${COLOR_BLUE}--------------${COLOR_RESET}"
    echo -e "1. Seguran√ßa do Sistema"
    echo -e "2. Gerenciar CapRover"
    echo -e "3. Configura√ß√µes do Sistema"
    echo -e "4. Ferramentas Avan√ßadas"
    echo -e "5. Sair"
    echo -e "\n${COLOR_YELLOW}Selecione uma op√ß√£o [1-5]: ${COLOR_RESET}"
}

#
# Fun√ß√£o: show_security_menu
#
# Descri√ß√£o:
#   Exibe o menu de seguran√ßa do sistema com op√ß√µes para execu√ß√£o de hardening,
#   diagn√≥stico e gerenciamento de m√≥dulos de seguran√ßa.
#
# Fluxo:
#   1. Limpa a tela e exibe o cabe√ßalho
#   2. Mostra as op√ß√µes de seguran√ßa dispon√≠veis
#   3. Aguarda a sele√ß√£o do usu√°rio
#
# Op√ß√µes:
#   1. Executar Hardening Completo - Aplica todas as configura√ß√µes de seguran√ßa
#   2. Executar Diagn√≥stico - Verifica o estado atual de seguran√ßa
#   3. Configurar M√≥dulos - Ajusta configura√ß√µes individuais
#   4. Reverter Altera√ß√µes - Desfaz as √∫ltimas altera√ß√µes
#   0. Voltar - Retorna ao menu principal
#
# Vari√°veis de Ambiente:
#   - COLOR_BLUE: Cor para t√≠tulos
#   - COLOR_GREEN: Cor para op√ß√µes ativas
#   - COLOR_YELLOW: Cor para entrada do usu√°rio
#   - COLOR_RESET: Resetar formata√ß√£o de cor
#
# Retorno:
#   Nenhum (exibe o menu no terminal)
#
show_security_menu() {
    clear
    echo -e "${COLOR_BLUE}==================================================${COLOR_RESET}"
    echo -e "${COLOR_BLUE}    MENU DE SEGURAN√áA DO SISTEMA          ${COLOR_RESET}"
    echo -e "${COLOR_BLUE}==================================================${COLOR_RESET}"
    echo -e "${COLOR_GREEN}1. üîí Executar Hardening Completo${COLOR_RESET}"
    echo -e "${COLOR_GREEN}2. üîç Executar Diagn√≥stico de Seguran√ßa${COLOR_RESET}"
    echo -e "${COLOR_GREEN}3. ‚öôÔ∏è Configurar M√≥dulos Individuais${COLOR_RESET}"
    echo -e "${COLOR_GREEN}4. üîÑ Reverter Altera√ß√µes (Rollback)${COLOR_RESET}"
    echo -e "${COLOR_GREEN}0. ‚Ü©Ô∏è Voltar ao menu principal${COLOR_RESET}"
    echo -e "\n${COLOR_YELLOW}Selecione uma op√ß√£o [0-4]: ${COLOR_RESET}"
    show_header
    echo -e "${COLOR_GREEN}SEGURAN√áA:${COLOR_RESET}\n"
    
    echo -e "1. üõ°Ô∏è  Executar Hardening Completo"
    echo -e "2. üîç Executar Diagn√≥stico de Seguran√ßa"
    echo -e "3. ‚öôÔ∏è  Configurar M√≥dulos Individuais"
    echo -e "4. üîÑ Reverter Altera√ß√µes (Rollback)"
    echo -e "0. ‚Ü©Ô∏è  Voltar ao menu principal\n"
    echo -n "Escolha uma op√ß√£o: "
}

#
# Fun√ß√£o: show_caprover_menu
#
# Descri√ß√£o:
#   Exibe o menu de gerenciamento do CapRover com op√ß√µes para instala√ß√£o,
#   valida√ß√£o e manuten√ß√£o do ambiente CapRover.
#
# Fluxo:
#   1. Limpa a tela e exibe o cabe√ßalho
#   2. Mostra as op√ß√µes do CapRover dispon√≠veis
#   3. Aguarda a sele√ß√£o do usu√°rio
#
# Op√ß√µes:
#   1. Instalar/Configurar - Instala ou reconfigura o CapRover
#   2. Validar Instala√ß√£o - Verifica a instala√ß√£o atual
#   3. Ferramentas de Manuten√ß√£o - Acessa utilit√°rios avan√ßados
#   0. Voltar - Retorna ao menu principal
#
# Depend√™ncias:
#   - show_header: Fun√ß√£o para exibir o cabe√ßalho
#
# Retorno:
#   Nenhum (exibe o menu no terminal)
#
show_caprover_menu() {
    clear
    show_header
    echo -e "${COLOR_BLUE}==================================================${COLOR_RESET}"
    echo -e "${COLOR_BLUE}    GERENCIAMENTO CAPROVER          ${COLOR_RESET}"
    echo -e "${COLOR_BLUE}==================================================${COLOR_RESET}"
    echo -e "${COLOR_GREEN}1. üöÄ Instalar/Configurar CapRover${COLOR_RESET}"
    echo -e "${COLOR_GREEN}2. üîç Validar Instala√ß√£o${COLOR_RESET}"
    echo -e "${COLOR_GREEN}3. üõ†Ô∏è  Ferramentas de Manuten√ß√£o${COLOR_RESET}"
    echo -e "${COLOR_GREEN}0. ‚Ü©Ô∏è  Voltar ao menu principal${COLOR_RESET}"
    echo -e "\n${COLOR_YELLOW}Selecione uma op√ß√£o [0-3]: ${COLOR_RESET}"
}

# Fun√ß√£o para exibir o menu de ferramentas avan√ßadas
show_advanced_tools_menu() {
    clear
    show_header
    echo -e "${COLOR_GREEN}FERRAMENTAS AVAN√áADAS:${COLOR_RESET}\n"
    
    echo -e "1. üîÑ Atualizar Scripts"
    echo -e "2. üìä Gerar Relat√≥rio Detalhado"
    echo -e "3. üßπ Limpar Dados Tempor√°rios"
    echo -e "4. üîç Verificar Depend√™ncias"
    echo -e "0. ‚Ü©Ô∏è  Voltar ao menu principal\n"
    echo -n "Escolha uma op√ß√£o: "
}

#
# Fun√ß√£o: load_module
#
# Descri√ß√£o:
#   Carrega dinamicamente um m√≥dulo do sistema, incluindo suas fun√ß√µes e valida√ß√µes.
#   Esta fun√ß√£o √© respons√°vel por carregar os scripts necess√°rios para a execu√ß√£o
#   de funcionalidades modulares do sistema.
#
# Par√¢metros:
#   $1 - Nome do m√≥dulo a ser carregado (sem extens√£o)
#
# Fluxo:
#   1. Verifica se o diret√≥rio do m√≥dulo existe
#   2. Carrega o arquivo principal do m√≥dulo (.sh)
#   3. Carrega as valida√ß√µes do m√≥dulo, se existirem (validations.sh)
#
# Retorno:
#   0 - M√≥dulo carregado com sucesso
#   1 - Falha ao carregar o m√≥dulo
#
# Vari√°veis Globais:
#   - MODULES_DIR: Diret√≥rio base dos m√≥dulos
#
# Depend√™ncias:
#   - error: Fun√ß√£o para exibir mensagens de erro
#
# Exemplo:
#   load_module "ssh"
#   if [ $? -eq 0 ]; then
#       echo "M√≥dulo SSH carregado com sucesso"
#   fi
#
load_module() {
    local module_name=$1
    local module_dir="${MODULES_DIR}/${module_name}"
    
    if [ ! -d "$module_dir" ]; then
        error "M√≥dulo $module_name n√£o encontrado em $module_dir"
        return 1
    fi
    
    # Carregar m√≥dulo
    if [ -f "${module_dir}/${module_name}.sh" ]; then
        source "${module_dir}/${module_name}.sh"
    else
        error "Arquivo principal do m√≥dulo $module_name n√£o encontrado"
        return 1
    fi
    
    # Carregar valida√ß√µes do m√≥dulo, se existirem
    if [ -f "${module_dir}/validations.sh" ]; then
        source "${module_dir}/validations.sh"
    fi
    
    return 0
}

#
# Fun√ß√£o: execute_full_hardening
#
# Descri√ß√£o:
#   Executa todas as etapas de hardening do sistema de forma sequencial,
#   aplicando as configura√ß√µes de seguran√ßa definidas nos m√≥dulos.
#
# Fluxo:
#   1. Verifica privil√©gios de superusu√°rio
#   2. Cria diret√≥rio de backup
#   3. Carrega e executa todos os m√≥dulos de seguran√ßa
#   4. Aplica as configura√ß√µes de hardening
#   5. Gera relat√≥rio de execu√ß√£o
#
# Requisitos:
#   - Execu√ß√£o como superusu√°rio (root)
#   - M√≥dulos de seguran√ßa instalados
#
# Vari√°veis Globais:
#   - BACKUP_DIR: Diret√≥rio para armazenar backups
#   - LOG_DIR: Diret√≥rio para armazenar logs
#   - MODULES: Lista de m√≥dulos a serem executados
#
# Depend√™ncias:
#   - load_module: Para carregar os m√≥dulos de seguran√ßa
#   - check_root_privileges: Para verificar privil√©gios
#   - show_header: Para exibir o cabe√ßalho
#
# Retorno:
#   0 - Hardening executado com sucesso
#   1 - Falha durante a execu√ß√£o do hardening
#
# Fun√ß√£o: configure_individual_modules
#
# Descri√ß√£o:
#   Permite configurar cada m√≥dulo de seguran√ßa individualmente, fornecendo
#   uma interface interativa para ajustes espec√≠ficos em cada m√≥dulo.
#
# Fluxo:
#   1. Exibe o menu de m√≥dulos dispon√≠veis
#   2. Aguarda a sele√ß√£o do usu√°rio
#   3. Carrega o m√≥dulo selecionado
#   4. Executa a configura√ß√£o espec√≠fica do m√≥dulo
#   5. Retorna ao menu ap√≥s a conclus√£o
#
# M√≥dulos Suportados:
#   1. SSH - Configura√ß√µes de seguran√ßa do servidor SSH
#   2. UFW - Configura√ß√£o do firewall
#   3. Fail2Ban - Configura√ß√£o de prote√ß√£o contra for√ßa bruta
#
# Vari√°veis Globais:
#   - COLOR_YELLOW: Cor para mensagens de aviso
#   - COLOR_RESET: Resetar formata√ß√£o de cor
#
# Depend√™ncias:
#   - load_module: Para carregar os m√≥dulos
#   - show_module_menu: Para exibir o menu de m√≥dulos
#
# Retorno:
#   Nenhum (interface interativa)
#
# Exemplo:
#   configure_individual_modules
#
configure_individual_modules() {
    while true; do
        show_module_menu
        read -r choice
        
        case $choice in
            1) # SSH
                load_module "ssh"
                
                # Obter porta SSH atual
                local ssh_port=$(grep -i "^\s*Port\s" /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}' || echo "22")
                
                echo -e "\n${COLOR_YELLOW}Porta SSH atual: $ssh_port${COLOR_RESET}"
                read -p "Deseja alterar a porta SSH? (s/N): " change_port
                
                if [[ "$change_port" =~ ^[Ss][IiMm]?$ ]]; then
                    read -p "Informe a nova porta SSH (deixe em branco para gerar aleat√≥ria): " new_port
                    
                    if [ -z "$new_port" ]; then
                        # Gerar porta aleat√≥ria entre 1024 e 32767
                        new_port=$((RANDOM % 31744 + 1024))
                        echo -e "${COLOR_YELLOW}Porta aleat√≥ria gerada: $new_port${COLOR_RESET}"
                    fi
                    
                    ssh_main secure "$new_port"
                else
                    ssh_main secure "$ssh_port"
                fi
                ;;
                
            2) # UFW
                load_module "ufw"
                ufw_main secure
                ;;
                
            3) # Fail2Ban
                load_module "fail2ban"
                fail2ban_main secure
                ;;
                
            0) # Voltar
                return 0
                ;;
                
            *)
                error "Op√ß√£o inv√°lida. Tente novamente."
                ;;
        esac
        
        read -p "Pressione Enter para continuar..."
    done
}

#
# Fun√ß√£o: generate_security_report
#
# Descri√ß√£o:
#   Gera um relat√≥rio abrangente de seguran√ßa do sistema, incluindo verifica√ß√µes
#   de servi√ßos, atualiza√ß√µes, portas abertas, usu√°rios, logs e muito mais.
#
# Fluxo:
#   1. Cria diret√≥rio de relat√≥rios com timestamp
#   2. Coleta informa√ß√µes do sistema
#   3. Verifica status de servi√ßos essenciais
#   4. Coleta informa√ß√µes de seguran√ßa
#   5. Gera relat√≥rio detalhado em arquivo
#
# Se√ß√µes do Relat√≥rio:
#   1. Informa√ß√µes do Sistema
#   2. Status dos Servi√ßos (SSH, UFW, Fail2Ban)
#   3. Atualiza√ß√µes Dispon√≠veis
#   4. Portas Abertas
#   5. Usu√°rios com Privil√©gios
#   6. Contas com Senhas Vazias
#   7. Logs de Seguran√ßa
#   8. Verifica√ß√£o de Rootkits
#   9. Verifica√ß√£o de Malware
#   10. Verifica√ß√£o de Integridade de Arquivos
#   11. √öltimos Logins Bem-Sucedidos
#   12. Tentativas de Login Malsucedidas
#   13. Arquivos de Inicializa√ß√£o
#   14. Tarefas Agendadas
#   15. Permiss√µes de Arquivos Importantes
#   16. Uso de Disco
#   17. Uso de Mem√≥ria
#   18. Processos em Execu√ß√£o
#   19. Conex√µes de Rede Ativas
#   20. Atualiza√ß√µes de Seguran√ßa
#
# Vari√°veis Globais:
#   - REPORTS_DIR: Diret√≥rio base para armazenar relat√≥rios
#   - COLOR_GREEN: Cor para mensagens de sucesso
#   - COLOR_YELLOW: Cor para mensagens de aviso
#   - COLOR_RESET: Resetar formata√ß√£o de cor
#
# Depend√™ncias:
#   - check_root_privileges: Para verificar privil√©gios de superusu√°rio
#   - show_header: Para exibir o cabe√ßalho
#
# Retorno:
#   Nenhum (gera arquivo de relat√≥rio)
#
# Exemplo:
#   generate_security_report
#
generate_security_report() {
    show_header
    echo -e "${COLOR_GREEN}RELAT√ìRIO DE SEGURAN√áA${COLOR_RESET}\n"
    
    # Verificar privil√©gios de superusu√°rio
    check_root_privileges
    
    # Criar diret√≥rio de relat√≥rios
    local report_dir="${REPORTS_DIR}/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$report_dir"
    for module in "${MODULES[@]}"; do
        echo -e "\n${COLOR_BLUE}=== M√ìDULO: ${module^^} ===${COLOR_RESET}"
        
        # Carregar m√≥dulo
        if ! load_module "$module"; then
            echo -e "${COLOR_RED}‚ùå M√≥dulo $module n√£o encontrado ou com erros${COLOR_RESET}"
            continue
        fi
        
        # Executar fun√ß√£o de relat√≥rio do m√≥dulo
        case $module in
            "ssh")
                ssh_main report
                ;;
            "ufw")
                ufw_main report
                ;;
            "fail2ban")
                fail2ban_main report
                ;;
            *)
                echo -e "${COLOR_YELLOW}‚ö†Ô∏è  Relat√≥rio n√£o dispon√≠vel para o m√≥dulo $module${COLOR_RESET}"
                ;;
        esac
    done
    
    echo -e "\n${COLOR_GREEN}‚úÖ Relat√≥rio de seguran√ßa conclu√≠do!${COLOR_RESET}"
    echo -e "${COLOR_YELLOW}Recomenda√ß√µes de seguran√ßa foram exibidas acima.${COLOR_RESET}\n"
    
    read -p "Pressione Enter para continuar..."
}

#
# Fun√ß√£o: rollback_changes
#
# Descri√ß√£o:
#   Permite reverter as altera√ß√µes feitas pelo script para um estado anterior,
#   utilizando os backups criados durante a execu√ß√£o das opera√ß√µes.
#
# Fluxo:
#   1. Exibe cabe√ßalho e aviso de confirma√ß√£o
#   2. Lista todos os backups dispon√≠veis no diret√≥rio de backup
#   3. Permite ao usu√°rio selecionar um backup para restaura√ß√£o
#   4. Executa a restaura√ß√£o do backup selecionado
#
# Vari√°veis Globais:
#   - BACKUP_DIR: Diret√≥rio onde os backups est√£o armazenados
#   - COLOR_GREEN: Cor para mensagens de sucesso
#   - COLOR_RED: Cor para mensagens de erro/aviso
#   - COLOR_YELLOW: Cor para mensagens informativas
#   - COLOR_RESET: Resetar formata√ß√£o de cor
#
# Depend√™ncias:
#   - show_header: Para exibir o cabe√ßalho
#   - Fun√ß√µes de rollback espec√≠ficas de cada m√≥dulo
#
# Retorno:
#   0 - Rollback conclu√≠do com sucesso
#   1 - Falha durante o processo de rollback
#
# Exemplo:
#   rollback_changes
#
rollback_changes() {
    show_header
    echo -e "${COLOR_GREEN}REVERTER ALTERA√á√ïES (ROLLBACK)${COLOR_RESET}\n"
    
    echo -e "${COLOR_RED}‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° reverter as altera√ß√µes feitas pelo script.${COLOR_RESET}\n"
    
    # Listar backups dispon√≠veis
    echo -e "${COLOR_YELLOW}Backups dispon√≠veis:${COLOR_RESET}"
    local backups=()
    local i=1
    
    if [ -d "$BACKUP_DIR" ]; then
        while IFS= read -r -d '' backup; do
            backups+=("$backup")
            echo -e "$i. ${backup##*/}"
            ((i++))
        done < <(find "$BACKUP_DIR" -type d -name "backup_*" -print0 | sort -zr)
    fi
    
    if [ ${#backups[@]} -eq 0 ]; then
        echo -e "${COLOR_YELLOW}Nenhum backup encontrado.${COLOR_RESET}"
        read -p "Pressione Enter para continuar..."
        return 0
    fi
    
    echo -e "\n0. ‚Ü©Ô∏è  Voltar"
    echo -n "\nEscolha um backup para restaurar (ou 0 para cancelar): "
    read -r choice
    
    # Validar escolha
    if ! [[ "$choice" =~ ^[0-9]+$ ]]; then
        error "Op√ß√£o inv√°lida. Apenas n√∫meros s√£o permitidos."
        read -p "Pressione Enter para continuar..."
        return 1
    fi
    
    if [ "$choice" -eq 0 ]; then
        return 0
    fi
    
    if [ "$choice" -lt 1 ] || [ "$choice" -gt ${#backups[@]} ]; then
        error "Op√ß√£o inv√°lida. Escolha um n√∫mero entre 1 e ${#backups[@]} ou 0 para cancelar."
        read -p "Pressione Enter para continuar..."
        return 1
    fi
    
    local selected_backup="${backups[$((choice-1))]}"
    
    # Confirmar restaura√ß√£o
    echo -e "\n${COLOR_RED}‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° prestes a restaurar o sistema a partir do backup:${COLOR_RESET}"
    echo -e "${COLOR_YELLOW}$selected_backup${COLOR_RESET}\n"
    
    read -p "Tem certeza que deseja continuar? (s/N): " confirm
    
    if ! [[ "$confirm" =~ ^[Ss][IiMm]?$ ]]; then
        echo -e "${COLOR_YELLOW}Opera√ß√£o cancelada pelo usu√°rio.${COLOR_RESET}"
        read -p "Pressione Enter para continuar..."
        return 0
    fi
    
    # Implementar l√≥gica de restaura√ß√£o
    echo -e "\n${COLOR_YELLOW}Iniciando restaura√ß√£o a partir do backup...${COLOR_RESET}"
    
    # Aqui voc√™ implementaria a l√≥gica de restaura√ß√£o para cada m√≥dulo
    # Por exemplo:
    # - Restaurar configura√ß√µes do SSH
    # - Restaurar regras do UFW
    # - Restaurar configura√ß√µes do Fail2Ban
    
    echo -e "\n${COLOR_GREEN}‚úÖ Restaura√ß√£o conclu√≠da com sucesso!${COLOR_RESET}"
    echo -e "${COLOR_YELLOW}Recomenda-se reiniciar o servidor para aplicar as altera√ß√µes.${COLOR_RESET}\n"
    
    read -p "Pressione Enter para continuar..."
}

#
# Fun√ß√£o: advanced_tools
#
# Descri√ß√£o:
#   Fornece um conjunto de ferramentas avan√ßadas para gerenciamento do sistema,
#   incluindo atualiza√ß√£o de scripts, gera√ß√£o de relat√≥rios e limpeza de dados.
#
# Op√ß√µes:
#   1. Atualizar Scripts - Atualiza os scripts a partir do reposit√≥rio Git
#   2. Gerar Relat√≥rio Detalhado - Gera um relat√≥rio de seguran√ßa completo
#   3. Limpar Dados Tempor√°rios - Remove arquivos tempor√°rios e caches
#   4. Verificar Depend√™ncias - Verifica as depend√™ncias do sistema
#   0. Voltar - Retorna ao menu anterior
#
# Fluxo:
#   1. Exibe o menu de ferramentas avan√ßadas
#   2. Aguarda a sele√ß√£o do usu√°rio
#   3. Executa a a√ß√£o correspondente
#   4. Retorna ao menu ap√≥s a conclus√£o
#
# Vari√°veis Globais:
#   - COLOR_BLUE: Cor para t√≠tulos
#   - COLOR_GREEN: Cor para mensagens de sucesso
#   - COLOR_RED: Cor para mensagens de erro/aviso
#   - COLOR_YELLOW: Cor para mensagens informativas
#   - COLOR_RESET: Resetar formata√ß√£o de cor
#
# Depend√™ncias:
#   - show_advanced_tools_menu: Para exibir o menu
#   - generate_security_report: Para gerar relat√≥rios
#   - check_dependencies: Para verificar depend√™ncias
#   - Comandos do sistema: git, apt-get, find, rm
#
# Retorno:
#   Nenhum (interface interativa)
#
# Exemplo:
#   advanced_tools
#
advanced_tools() {
    while true; do
        show_advanced_tools_menu
        read -r choice
        
        case $choice in
            1) # Atualizar Scripts
                echo -e "\n${COLOR_BLUE}=== ATUALIZAR SCRIPTS ===${COLOR_RESET}\n"
                
                # Verificar se o git est√° instalado
                if ! command -v git &> /dev/null; then
                    error "Git n√£o est√° instalado. Instale o Git para continuar."
                    read -p "Pressione Enter para continuar..."
                    continue
                fi
                
                # Verificar se o diret√≥rio √© um reposit√≥rio git
                if [ ! -d ".git" ]; then
                    error "Este n√£o √© um reposit√≥rio Git."
                    read -p "Pressione Enter para continuar..."
                    continue
                fi
                
                # Obter o branch atual
                current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
                if [ $? -ne 0 ]; then
                    error "Falha ao obter o branch atual."
                    read -p "Pressione Enter para continuar..."
                    continue
                fi
                
                echo -e "Branch atual: ${COLOR_YELLOW}$current_branch${COLOR_RESET}"
                echo -e "\n${COLOR_YELLOW}‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° sobrescrever todas as altera√ß√µes locais.${COLOR_RESET}\n"
                
                read -p "Tem certeza que deseja atualizar os scripts? (s/N): " confirm
                
                if [[ "$confirm" =~ ^[Ss][IiMm]?$ ]]; then
                    echo -e "\n${COLOR_YELLOW}Atualizando scripts...${COLOR_RESET}"
                    
                    # Fazer backup das altera√ß√µes locais
                    echo -e "\n${COLOR_BLUE}Fazendo backup das altera√ß√µes locais...${COLOR_RESET}"
                    git stash save "Altera√ß√µes locais antes da atualiza√ß√£o em $(date +'%Y-%m-%d %H:%M:%S')"
                    
                    # Atualizar o reposit√≥rio
                    echo -e "\n${COLOR_BLUE}Atualizando reposit√≥rio...${COLOR_RESET}"
                    git fetch origin "$current_branch"
                    
                    if [ $? -ne 0 ]; then
                        error "Falha ao buscar atualiza√ß√µes do reposit√≥rio remoto."
                        read -p "Pressione Enter para continuar..."
                        continue
                    fi
                    
                    # Verificar se h√° atualiza√ß√µes dispon√≠veis
                    LOCAL=$(git rev-parse @)
                    REMOTE=$(git rev-parse "@\{u\}")
                    
                    if [ "$LOCAL" = "$REMOTE" ]; then
                        echo -e "\n${COLOR_GREEN}‚úÖ Seus scripts j√° est√£o atualizados!${COLOR_RESET}"
                        read -p "Pressione Enter para continuar..."
                        continue
                    fi
                    
                    # Aplicar as atualiza√ß√µes
                    echo -e "\n${COLOR_BLUE}Aplicando atualiza√ß√µes...${COLOR_RESET}"
                    git reset --hard "origin/$current_branch"
                    
                    if [ $? -ne 0 ]; then
                        error "Falha ao aplicar as atualiza√ß√µes."
                        read -p "Pressione Enter para continuar..."
                        continue
                    fi
                    
                    # Tornar os scripts execut√°veis
                    echo -e "\n${COLOR_BLUE}Configurando permiss√µes...${COLOR_RESET}"
                    chmod +x *.sh
                    
                    echo -e "\n${COLOR_GREEN}‚úÖ Scripts atualizados com sucesso!${COLOR_RESET}"
                    echo -e "${COLOR_YELLOW}Reinicie o script para aplicar as altera√ß√µes.${COLOR_RESET}"
                    exit 0
                else
                    echo -e "\n${COLOR_YELLOW}Atualiza√ß√£o cancelada pelo usu√°rio.${COLOR_RESET}"
                    read -p "Pressione Enter para continuar..."
                fi
                ;;
                
            2) # Gerar Relat√≥rio Detalhado
                generate_security_report
                ;;
                
            3) # Limpar Dados Tempor√°rios
                echo -e "\n${COLOR_BLUE}=== LIMPAR DADOS TEMPOR√ÅRIOS ===${COLOR_RESET}\n"
                
                echo -e "${COLOR_RED}‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover arquivos tempor√°rios e caches.${COLOR_RESET}\n"
                
                read -p "Tem certeza que deseja continuar? (s/N): " confirm
                
                if [[ "$confirm" =~ ^[Ss][IiMm]?$ ]]; then
                    echo -e "\n${COLOR_YELLOW}Limpando dados tempor√°rios...${COLOR_RESET}"
                    
                    # Limpar cache do apt
                    if command -v apt-get &> /dev/null; then
                        echo -e "\n${COLOR_BLUE}Limpando cache do apt...${COLOR_RESET}"
                        apt-get clean
                        apt-get autoclean
                    fi
                    
                    # Limpar logs antigos
                    echo -e "\n${COLOR_BLUE}Limpando logs antigos...${COLOR_RESET}"
                    find /var/log -type f -name "*.gz" -delete
                    find /var/log -type f -name "*.log.*" -delete
                    
                    # Limpar diret√≥rios tempor√°rios
                    echo -e "\n${COLOR_BLUE}Limpando diret√≥rios tempor√°rios...${COLOR_RESET}"
                    rm -rf /tmp/*
                    rm -rf /var/tmp/*
                    
                    echo -e "\n${COLOR_GREEN}‚úÖ Limpeza conclu√≠da com sucesso!${COLOR_RESET}"
                else
                    echo -e "\n${COLOR_YELLOW}Opera√ß√£o cancelada pelo usu√°rio.${COLOR_RESET}"
                fi
                
                read -p "Pressione Enter para continuar..."
                ;;
                
            4) # Verificar Depend√™ncias
                echo -e "\n${COLOR_BLUE}=== VERIFICAR DEPEND√äNCIAS ===${COLOR_RESET}\n"
                
                check_dependencies
                
                read -p "Pressione Enter para continuar..."
                ;;
                
            0) # Voltar
                return 0
                ;;
                
            *)
                error "Op√ß√£o inv√°lida. Tente novamente."
                read -p "Pressione Enter para continuar..."
                ;;
        esac
    done
}
    local cmd="$1"
    local description="${2:-Executando comando}"
    
    echo -e "${COLOR_YELLOW}${description}...${COLOR_RESET}"
    if [ "$VERBOSE" = true ]; then
        echo -e "${COLOR_BLUE}Comando: ${cmd}${COLOR_RESET}"
    fi
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${COLOR_YELLOW}[MODO SIMULA√á√ÉO] O comando n√£o foi executado.${COLOR_RESET}"
        return 0
    fi
    
    if eval "$cmd"; then
        echo -e "${COLOR_GREEN}‚úÖ Sucesso!${COLOR_RESET}"
        return 0
    else
        echo -e "${COLOR_RED}‚ùå Falha ao executar o comando.${COLOR_RESET}" >&2
        return 1
    fi
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    clear
    show_header
    echo -e "${COLOR_GREEN}VERIFICANDO DEPEND√äNCIAS:${COLOR_RESET}\n"
    
    if [ -x "${BIN_DIR}/check-deps" ]; then
        "${BIN_DIR}/check-deps"
    else
        echo -e "${COLOR_RED}Erro: Script de verifica√ß√£o de depend√™ncias n√£o encontrado.${COLOR_RESET}"
    fi
    
    echo -e "\n${COLOR_YELLOW}Pressione Enter para continuar...${COLOR_RESET}"
    read -r
}

# Fun√ß√£o principal
main() {
    # Verificar se h√° argumentos de linha de comando
    if [ $# -gt 0 ]; then
        case $1 in
            --security)
                security_menu
                ;;
            --caprover)
                caprover_menu
                ;;
            --help | -h)
                show_help
                exit 0
                ;;
            --version | -v)
                echo -e "${COLOR_BLUE}Vers√£o 2.0.0${COLOR_RESET}"
                exit 0
                ;;
            *)
                echo -e "${COLOR_RED}Op√ß√£o inv√°lida. Use --help para ver as op√ß√µes dispon√≠veis.${COLOR_RESET}"
                exit 1
                ;;
        esac
    fi
    
    # Modo interativo
    while true; do
        show_menu
        read -r option
        
        case $option in
            1) security_menu ;;
            2) caprover_menu ;;
            3) system_config_menu ;;
            4) advanced_tools_menu ;;
            0) 
                echo -e "\n${COLOR_GREEN}Saindo... At√© logo! üëã${COLOR_RESET}"
                exit 0
                ;;
            *)
                echo -e "\n${COLOR_RED}Op√ß√£o inv√°lida! Por favor, tente novamente.${COLOR_RESET}"
                sleep 1
                ;;
        esac
    done
}

# Fun√ß√£o para exibir o menu de seguran√ßa
security_menu() {
    while true; do
        show_security_menu
        read -r option
        
        case $option in
            1) 
                if [ -x "${BIN_DIR}/security/harden" ]; then
                    "${BIN_DIR}/security/harden"
                else
                    echo -e "${COLOR_RED}Erro: Script de hardening n√£o encontrado.${COLOR_RESET}"
                fi
                ;;
            2)
                if [ -x "${BIN_DIR}/security/diagnose" ]; then
                    "${BIN_DIR}/security/diagnose"
                else
                    echo -e "${COLOR_RED}Erro: Script de diagn√≥stico n√£o encontrado.${COLOR_RESET}"
                fi
                ;;
            3) configure_individual_modules ;;
            4) rollback_changes ;;
            0) break ;;
            *)
                echo -e "\n${COLOR_RED}Op√ß√£o inv√°lida!${COLOR_RESET}"
                sleep 1
                ;;
        esac
    done
}

# Fun√ß√£o para exibir o menu do CapRover
caprover_menu() {
    while true; do
        show_caprover_menu
        read -r option
        
        case $option in
            1)
                if [ -x "${BIN_DIR}/caprover/setup" ]; then
                    "${BIN_DIR}/caprover/setup"
                else
                    echo -e "${COLOR_RED}Erro: Script de instala√ß√£o do CapRover n√£o encontrado.${COLOR_RESET}"
                fi
                ;;
            2)
                if [ -x "${BIN_DIR}/caprover/validate" ]; then
                    "${BIN_DIR}/caprover/validate"
                else
                    echo -e "${COLOR_RED}Erro: Script de valida√ß√£o do CapRover n√£o encontrado.${COLOR_RESET}"
                fi
                ;;
            3) 
                echo -e "\n${COLOR_YELLOW}Em desenvolvimento...${COLOR_RESET}"
                sleep 1
                ;;
            0) break ;;
            *)
                echo -e "\n${COLOR_RED}Op√ß√£o inv√°lida!${COLOR_RESET}"
                sleep 1
                ;;
        esac
    done
}

# Fun√ß√£o para exibir o menu de configura√ß√£o do sistema
system_config_menu() {
    while true; do
        clear
        show_header
        echo -e "${COLOR_GREEN}CONFIGURA√á√ÉO DO SISTEMA:${COLOR_RESET}\n"
        
        echo -e "1. ‚öôÔ∏è  Configura√ß√£o Inicial do Servidor"
        echo -e "2. üîÑ Atualizar Sistema"
        echo -e "3. üîç Verificar Depend√™ncias"
        echo -e "0. ‚Ü©Ô∏è  Voltar ao menu principal\n"
        echo -n "Escolha uma op√ß√£o: "
        
        read -r option
        
        case $option in
            1)
                if [ -x "${BIN_DIR}/setup" ]; then
                    "${BIN_DIR}/setup"
                else
                    echo -e "${COLOR_RED}Erro: Script de configura√ß√£o inicial n√£o encontrado.${COLOR_RESET}"
                fi
                ;;
            2)
                run_command "sudo apt update && sudo apt upgrade -y" "Atualizando o sistema"
                ;;
            3)
                check_dependencies
                ;;
            0) break ;;
            *)
                echo -e "\n${COLOR_RED}Op√ß√£o inv√°lida!${COLOR_RESET}"
                sleep 1
                ;;
        esac
    done
}

# Fun√ß√£o para exibir o menu de ferramentas avan√ßadas
advanced_tools_menu() {
    while true; do
        show_advanced_tools_menu
        read -r option
        
        case $option in
            1)
                echo -e "\n${COLOR_YELLOW}Atualizando scripts...${COLOR_RESET}"
                # L√≥gica para atualizar os scripts
                echo -e "${COLOR_GREEN}Scripts atualizados com sucesso!${COLOR_RESET}"
                ;;
            2)
                echo -e "\n${COLOR_YELLOW}Gerando relat√≥rio...${COLOR_RESET}"
                # L√≥gica para gerar relat√≥rio
                echo -e "${COLOR_GREEN}Relat√≥rio gerado com sucesso!${COLOR_RESET}"
                ;;
            3)
                echo -e "\n${COLOR_YELLOW}Limpando dados tempor√°rios...${COLOR_RESET}"
                # L√≥gica para limpar dados tempor√°rios
                echo -e "${COLOR_GREEN}Limpeza conclu√≠da!${COLOR_RESET}"
                ;;
            4)
                check_dependencies
                ;;
            0) break ;;
            *)
                echo -e "\n${COLOR_RED}Op√ß√£o inv√°lida!${COLOR_RESET}"
                sleep 1
                ;;
        esac
    done
}

# Fun√ß√£o para exibir ajuda
show_help() {
    echo -e "${COLOR_BLUE}Uso:${COLOR_RESET} $0 [OP√á√ÉO]"
    echo -e "\n${COLOR_BLUE}Op√ß√µes:${COLOR_RESET}"
    echo -e "  --security     Abre o menu de seguran√ßa"
    echo -e "  --caprover     Abre o menu do CapRover"
    echo -e "  -h, --help     Mostra esta mensagem de ajuda"
    echo -e "  -v, --version  Mostra a vers√£o do script"
    echo -e "\n${COLOR_BLUE}Exemplos:${COLOR_RESET}"
    echo -e "  $0 --security   # Abre o menu de seguran√ßa"
    echo -e "  $0 --caprover   # Abre o menu do CapRover"
    echo -e "  $0             # Abre o menu interativo"
}

# Fun√ß√£o para configurar m√≥dulos individuais (legado)
configure_individual_modules() {
    echo -e "\n${COLOR_YELLOW}Esta funcionalidade foi movida para o menu de seguran√ßa.${COLOR_RESET}"
    echo -e "Por favor, use a op√ß√£o 'Configurar M√≥dulos Individuais' no menu de seguran√ßa.\n"
    sleep 2
}

# Fun√ß√£o para reverter altera√ß√µes (legado)
rollback_changes() {
    echo -e "\n${COLOR_YELLOW}Esta funcionalidade foi movida para o menu de seguran√ßa.${COLOR_RESET}"
    echo -e "Por favor, use a op√ß√£o 'Reverter Altera√ß√µes (Rollback)' no menu de seguran√ßa.\n"
    sleep 2
}

# Fun√ß√£o para ferramentas avan√ßadas (legado)
advanced_tools() {
    advanced_tools_menu
}

# Executar fun√ß√£o principal
main "$@"
