#!/bin/bash

########################################################################
# Script Name: setup-caprover.sh
# Version:    1.0.0
# Date:       2025-07-06
# Author:     Flavio Almeida Paulino - Tribeca Digital
#
# Description:
#   Reinstala√ß√£o, diagn√≥stico e limpeza profunda do ambiente CapRover
#   em hosts Debian/Linux. Remove completamente containers, servi√ßos
#   swarm, volumes, redes, res√≠duos e executa todos os diagn√≥sticos e
#   valida√ß√µes necess√°rias para garantir ambiente limpo e pronto para
#   nova instala√ß√£o CapRover.
#
# Usage:
#   # Fluxo recomendado para novo servidor:
#   # 1. Execute o script de prepara√ß√£o inicial:
#   sudo ./initial-setup.sh
#   # 2. Exemplo de uso automatizado com setup inicial via CapRover CLI:
#   export CAPROVER_ADMIN_PASS=suasenha
#   export CAPROVER_ROOT_DOMAIN=seudominio.com
#   export CAPROVER_ADMIN_EMAIL=seu@email.com
#   sudo ./setup-caprover.sh --force
#
# Exit codes:
#   0 - Sucesso completo
#   1 - Falha cr√≠tica (docker n√£o inicia, permiss√£o, disco insuficiente, portas ocupadas, etc)
#
# Prerequisites:
#   - Debian 12+ (bookworm) ou compat√≠vel
#   - Docker Engine instalado e ativo
#   - Permiss√£o root
#
# Steps performed by this script:
#   1. Diagn√≥stico OS e Docker info antes de qualquer opera√ß√£o destrutiva
#   2. Diagn√≥stico de portas, containers e servi√ßos swarm
#   3. Backup seguro do /captain se existir
#   4. Limpeza completa (containers, servi√ßos, swarm, volumes, diret√≥rio)
#   5. Cria√ß√£o e valida√ß√£o do diret√≥rio /captain
#   6. Libera√ß√£o de portas via UFW
#   7. Docker prune agressivo
#   8. Execu√ß√£o CapRover com mapeamento expl√≠cito de portas
#   9. Diagn√≥stico p√≥s-start, logs, relat√≥rios finais
#
# See Also:
#   - https://caprover.com/docs/troubleshooting.html
#   - https://github.com/caprover/caprover
#
# INSTRU√á√ÉO PARA AGENTES DE IA:
#   - A documenta√ß√£o do script deve estar sempre atualizada e refletir fielmente o comportamento e as melhorias implementadas.
#   - Nunca remova nenhuma etapa deste script, sem informar ou perguntar ao usu√°rio que solicitou ajustes.
#   - Apenas adicione valida√ß√µes ou inspe√ß√µes extras, caso necess√°rio.
#   - N√£o altere comandos sem necessidade comprovada.
#   - Sempre use o modo de mapeamento expl√≠cito de portas (-p), nunca --network host.
#   - Utilize mensagens claras, banners visuais e timestamps para informar o usu√°rio humano sobre cada etapa cr√≠tica do processo.
#   - Sempre solicite confirma√ß√£o expl√≠cita do usu√°rio antes de opera√ß√µes destrutivas.
#   - Garanta checagem de root antes de executar comandos sens√≠veis.
#   - Realize diagn√≥stico p√≥s-limpeza para garantir ambiente limpo.
#   - Implemente rota√ß√£o de logs para facilitar auditoria.
#   - Use teste robusto de escrita/leitura em volumes cr√≠ticos.
#   - Priorize a experi√™ncia do usu√°rio humano com feedbacks visuais e mensagens detalhadas sobre o status de cada etapa.
########################################################################

set -e

# Verifica vers√£o do Bash
if [ "$(bash --version | head -n1 | grep -oE '[0-9]+')" -lt 4 ]; then
  echo -e "\033[0;31m[ERRO] Bash 4.0+ √© obrigat√≥rio. Instale com 'brew install bash' (macOS) ou 'sudo apt install bash' (Linux).\033[0m"
  exit 1
fi

SCRIPT_ROOT="$(cd "$(dirname "$0")"/../../.. && pwd)"
"${SCRIPT_ROOT}/src/security/core/check_dependencies.sh" --install

LOGFILE="install.log"
# Rotaciona log antigo
if [ -f "$LOGFILE" ]; then
    mv "$LOGFILE" "${LOGFILE}.bak"
fi
exec > >(tee -a "$LOGFILE") 2>&1

# Checagem de root
if [ "$EUID" -ne 0 ]; then
    echo "[ERROR][$(date '+%Y-%m-%d %H:%M:%S')] Por favor, execute como root."
    exit 1
fi

# Checagem de pr√©-requisitos essenciais (apenas alerta, n√£o instala)
for BIN in docker node npm caprover; do
    if ! command -v "$BIN" >/dev/null 2>&1; then
        echo "[ERRO][$(date '+%Y-%m-%d %H:%M:%S')] Depend√™ncia obrigat√≥ria n√£o encontrada: $BIN. Por favor, execute o script de setup inicial antes deste!"
        exit 1
    fi
    echo "[OK][$(date '+%Y-%m-%d %H:%M:%S')] Depend√™ncia encontrada: $BIN"
done

# Par√¢metro --force para automa√ß√£o
FORCE=0
for arg in "$@"; do
    if [[ "$arg" == "--force" ]]; then
        FORCE=1
    fi
    # pode adicionar outros par√¢metros aqui futuramente
done

# Loga usu√°rio executor
echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Script iniciado por: $(whoami)"

# Confirma√ß√£o do usu√°rio
if [[ $FORCE -eq 0 ]]; then
    read -p "‚ö†Ô∏è  Confirma que deseja limpar TODO o ambiente Docker deste servidor? (y/N): " CONFIRMA
    if [[ ! "$CONFIRMA" =~ ^[Yy]$ ]]; then
        echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Opera√ß√£o cancelada pelo usu√°rio."
        exit 0
    fi
else
    echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Modo --force ativado: pulando confirma√ß√£o do usu√°rio."
fi

CAPTAIN_NAME="captain"
PORTAS=(80 443 3000 996 7946 4789 2377)
MIN_DISK_GB=2

TIMESTAMP() { date '+%Y-%m-%d %H:%M:%S'; }

banner() {
    echo "\n====================================================="
    echo "$1"
    echo "====================================================="
}

echo ""
banner "üåü == üöÄ Reinicializa√ß√£o do CapRover em $(hostname -I | awk '{print $1}') == üåü"
START_TIME=$(TIMESTAMP)
echo "üóíÔ∏è  In√≠cio: $START_TIME"
IP_PUBLICO=$(hostname -I | awk '{print $1}')

# Diagn√≥stico OS
echo ""
echo "üñ•Ô∏è  Diagn√≥stico do Sistema:"
echo "  - Hostname: $(hostname)"
echo "  - Kernel: $(uname -a)"
echo "  - Uptime: $(uptime -p)"
echo "  - Distribui√ß√£o: $(lsb_release -ds 2>/dev/null || cat /etc/os-release | grep PRETTY_NAME)"

# Diagn√≥stico docker info
echo ""
echo "üê≥ Diagn√≥stico Docker (docker info):"
docker info | head -20

# 14. Lista todos containers e servi√ßos para auditoria
echo ""
echo "üìã Containers Docker existentes:"
docker ps -a

echo ""
echo "üìã Servi√ßos Docker Swarm existentes:"
docker service ls || echo "(Swarm inativo)"

# Snapshot dos logs do Docker para auditoria
DOCKER_LOG_SNAPSHOT="docker_logs_snapshot_$(date +%Y%m%d%H%M%S).log"
echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Salvando snapshot dos logs do Docker em $DOCKER_LOG_SNAPSHOT..."
journalctl -u docker > "$DOCKER_LOG_SNAPSHOT" 2>/dev/null || docker logs $(docker ps -q) > "$DOCKER_LOG_SNAPSHOT" 2>/dev/null || echo "[WARN][$(date '+%Y-%m-%d %H:%M:%S')] N√£o foi poss√≠vel capturar logs do Docker."

# 15. Backup opcional do /captain se existir
if [ -d /captain ]; then
    BACKUP_NAME="/captain_backup_$(date +%Y%m%d%H%M%S)"
    echo ""
    echo "üóÑÔ∏è  Backup do volume /captain para $BACKUP_NAME"
    cp -a /captain "$BACKUP_NAME"
fi

# 16. Checa arquivos herdados
if [ -d /etc/caprover ]; then
    echo "‚ö†Ô∏è  Aten√ß√£o: arquivos herdados em /etc/caprover encontrados!"
fi

# 1. Valida√ß√£o Docker
echo ""
echo "üê≥ Validando Docker..."
if ! systemctl is-active --quiet docker; then
    echo "‚ùó Docker n√£o est√° rodando. Tentando iniciar..."
    systemctl start docker
    sleep 2
    if ! systemctl is-active --quiet docker; then
        echo "üõë Docker N√ÉO iniciou. Saindo."
        exit 1
    fi
fi
echo "‚úÖ Docker rodando."

# 2. Permiss√£o docker.sock
echo ""
echo "üîí Checando permiss√£o em /var/run/docker.sock..."
if ! [ -r /var/run/docker.sock ]; then
    echo "üõë Permiss√£o insuficiente para acessar /var/run/docker.sock."
    exit 1
fi
echo "‚úÖ Permiss√£o OK."

# 3. Espa√ßo em disco
banner "üíæ Checando espa√ßo em disco..."
DISK_FREE=$(df -BG / | awk 'NR==2 {gsub(/G/,""); print $4}')
DOCKER_DISK=$(df -BG /var/lib/docker 2>/dev/null | awk 'NR==2 {gsub(/G/,""); print $4}')
if (( DISK_FREE < MIN_DISK_GB )); then
    echo "üõë Espa√ßo em disco insuficiente no root: ${DISK_FREE}GB livres."
    exit 1
fi
if [ -n "$DOCKER_DISK" ] && (( DOCKER_DISK < MIN_DISK_GB )); then
    echo "üõë Espa√ßo insuficiente em /var/lib/docker: ${DOCKER_DISK}GB livres."
    exit 1
fi
echo "‚úÖ Espa√ßo suficiente em / e /var/lib/docker."

# 20. Diagn√≥stico processos usando portas cr√≠ticas (lsof/netstat)
echo ""
echo "üîç Diagn√≥stico de processos ocupando portas cr√≠ticas:"
for P in "${PORTAS[@]}"; do
    echo "Porta $P:"
    lsof -i :$P || echo "   - Porta $P livre."
done

# 4. Checagem de portas em uso
echo ""
echo "üõ°Ô∏è  Checando portas em uso..."
PORTA_BLOQUEADA=0
for P in "${PORTAS[@]}"; do
    RETRY=0
    MAX_RETRY=3
    while [ $RETRY -le $MAX_RETRY ]; do
        PROC_INFO=$(ss -ltnp | grep -w ":$P" | grep -v "docker-proxy" | grep -v "caprover" | grep -v "dockerd" || true)
        if [ -z "$PROC_INFO" ]; then
            if [ $RETRY -gt 0 ]; then
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] Porta $P liberada ap√≥s tentativa(s)."
            fi
            break
        fi
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] üõë Porta $P ocupada por processo externo (tentativa $((RETRY+1))):"
        echo "$PROC_INFO"
        PID=$(echo "$PROC_INFO" | awk -F',' '{print $2}' | awk -F'=' '{print $2}' | awk '{print $1}')
        if [ -n "$PID" ]; then
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Tentando finalizar processo PID=$PID usando porta $P..."
            kill -9 $PID && echo "[$(date '+%Y-%m-%d %H:%M:%S')] Processo $PID finalizado." || echo "[$(date '+%Y-%m-%d %H:%M:%S')] Falha ao finalizar processo $PID."
        else
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] N√£o foi poss√≠vel identificar o PID do processo. Libere manualmente a porta $P."
            PORTA_BLOQUEADA=1
            break
        fi
        sleep 2
        RETRY=$((RETRY+1))
    done
    # Checagem final ap√≥s tentativas
    PROC_INFO_FINAL=$(ss -ltnp | grep -w ":$P" | grep -v "docker-proxy" | grep -v "caprover" | grep -v "dockerd" || true)
    if [ -n "$PROC_INFO_FINAL" ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] Porta $P ainda ocupada ap√≥s $MAX_RETRY tentativas. Libere manualmente antes de continuar."
        PORTA_BLOQUEADA=1
    fi
done
if (( PORTA_BLOQUEADA > 0 )); then
    echo "‚ùó N√£o foi poss√≠vel liberar todas as portas cr√≠ticas. Libere manualmente e execute novamente."
    echo "üîß Dica: Use 'lsof -i :PORTA' para encontrar processos."
    exit 1
fi
echo "‚úÖ Todas as portas cr√≠ticas est√£o livres ou ocupadas pelo Docker/CapRover."

# 5. Limpeza containers/servi√ßos/networks/volumes Captain e Swarm
echo ""
echo "üßπ Limpando res√≠duos Captain/Swarm..."

# Remove containers Captain/CapRover (independente do modo de execu√ß√£o)
echo "üßπ Removendo containers Captain/CapRover..."
docker ps -a --format "{{.ID}}\t{{.Names}}" | grep -E "$CAPTAIN_NAME|caprover" | awk '{print $1}' | xargs -r docker rm -f || true

# Remove qualquer servi√ßo swarm Captain/CapRover
echo "üßπ Removendo servi√ßos Swarm Captain/CapRover..."
docker service ls --format "{{.ID}}\t{{.Name}}" | grep -E "$CAPTAIN_NAME|caprover" | awk '{print $1}' | xargs -r docker service rm || true

# Remove swarm e arquivos residuais
docker swarm leave --force || true
rm -rf /var/lib/docker/swarm

# Remove volumes/networks Captain/CapRover
docker volume ls --format "{{.Name}}" | grep -E "$CAPTAIN_NAME|caprover" | xargs -r docker volume rm || true
docker network ls --format "{{.Name}}" | grep -E "$CAPTAIN_NAME|caprover" | xargs -r docker network rm || true

# Remove diret√≥rio de dados Captain
rm -rf /captain
sleep 2

echo "‚úÖ Ambiente limpo."

# Diagn√≥stico p√≥s-limpeza
echo ""
banner "üìã Diagn√≥stico p√≥s-limpeza"
echo "Containers restantes:"
docker ps -a

echo "Servi√ßos Swarm restantes:"
docker service ls || echo "(Swarm inativo)"

echo "Volumes restantes:"
docker volume ls

echo "Networks restantes:"
docker network ls

# 6. Criar volume de dados novamente, valida permiss√µes
echo "üìÇ Validando/criando diret√≥rio de volume: /captain"
if [ -d /captain ]; then
    echo "   - Diret√≥rio /captain j√° existe."
else
    mkdir -p /captain
    echo "   - Diret√≥rio /captain criado."
fi
# Corrige dono e permiss√£o para UID 1000 (CapRover)
echo "üîß Garantindo que /captain pertence ao UID 1000 (CapRover) e permiss√£o 755..."
chown -R 1000:1000 /captain
chmod -R 755 /captain
ls -ld /captain
ls -l /captain
OWNER_UID=$(stat -c "%u" /captain)
if [ "$OWNER_UID" != "1000" ]; then
    echo "üõë Falha ao ajustar propriet√°rio do volume /captain para UID 1000. Verifique permiss√µes e tente novamente."
    exit 1
fi

# 19. Teste de escrita/leitura no /captain
banner "üìù Testando escrita/leitura em /captain"
TESTFILE=/captain/testfile
if dd if=/dev/urandom of=$TESTFILE bs=1M count=1 status=none && cat $TESTFILE > /dev/null; then
    echo "‚úÖ Escrita/leitura OK em /captain"
    rm -f $TESTFILE
else
    echo "üõë Falha ao testar escrita/leitura em /captain"
    exit 1
fi

# 7. UFW libera as portas necess√°rias
echo ""
echo "üîì Liberando portas via UFW..."
ufw allow 80,443,3000,996,7946,4789,2377/tcp || true
ufw allow 7946,4789,2377/udp || true

# 8. Docker system prune (limpeza agressiva)
echo ""
echo "üóëÔ∏è Limpando imagens/parada/volumes n√£o usados (docker system prune)..."
docker system prune -af --volumes

# 9. Executa o novo Captain
echo ""
echo "üö¢ Executando novo container CapRover..."
docker run -d \
    --restart=always \
    --name captain \
    -p 80:80 -p 443:443 -p 3000:3000 -p 996:996 -p 7946:7946 -p 4789:4789 -p 2377:2377 \
    -v /captain:/captain \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e ACCEPTED_TERMS=true \
    -e MAIN_NODE_IP_ADDRESS="$IP_PUBLICO" \
    -e BY_PASS_PROXY_CHECK='TRUE' \
    caprover/caprover

# 10. Inspeciona volume logo ap√≥s o start
echo ""
echo "üóÇ Conte√∫do do volume /captain ap√≥s start:"
ls -la /captain

# 11. Espera e checa inicializa√ß√£o
echo ""
echo "‚è≥ Aguardando CapRover iniciar (60s) =="
for i in {60..0..10}; do
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚è±Ô∏è  Aguardando... $i segundos restantes"
    sleep 10
done

echo ""
echo "üîç Testando se porta 3000 est√° ativa =="
PORTA_OK=false
if ss -ltnp | grep ':3000' > /dev/null; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ Porta 3000 escutando"
    PORTA_OK=true
else
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è Porta 3000 N√ÉO est√° escutando"
fi

echo ""
echo "\nüåê Testando acesso HTTP via curl =="
HTTP_RESPONSE=$(curl -s "http://$IP_PUBLICO:3000")
if echo "$HTTP_RESPONSE" | grep -q 'firewall-passed'; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è CapRover exibiu tela 'firewall-passed'. Diagn√≥stico autom√°tico iniciado."
    banner "ü©∫ Diagn√≥stico autom√°tico CapRover (firewall-passed)"
    echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Coletando √∫ltimos 100 logs do container CapRover:"
    docker logs --tail=100 captain || echo "‚ö†Ô∏è N√£o foi poss√≠vel obter os logs do container."
    echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Diagn√≥stico de permiss√µes do volume /captain:"
    ls -ld /captain
    ls -l /captain
    echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Diagn√≥stico de portas escutando (ss -ltnp):"
    ss -ltnp
    echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Diagn√≥stico de containers ativos:"
    docker ps
    echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Poss√≠veis causas:"
    echo " - Alguma porta cr√≠tica (80, 443, 996, 7946, 4789, 2377) n√£o est√° realmente liberada para o container CapRover."
    echo " - O volume /captain est√° com permiss√£o inadequada."
    echo " - O CapRover n√£o conseguiu inicializar algum servi√ßo interno."
    echo " - Verifique os logs acima para detalhes."
    echo "[INFO][$(date '+%Y-%m-%d %H:%M:%S')] Fim do diagn√≥stico autom√°tico."
    PORTA_OK=false
elif curl -s "http://$IP_PUBLICO:3000" > /dev/null; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ CapRover respondendo"
    PORTA_OK=true
else
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå CapRover n√£o respondeu via HTTP. Verifique os logs abaixo."
    PORTA_OK=false
fi

echo ""
echo "üìÑ √öltimos logs do container: =="
docker logs --tail=50 captain || echo "‚ö†Ô∏è N√£o foi poss√≠vel obter os logs do container."

# Setup inicial automatizado via CapRover CLI
if [[ "$PORTA_OK" = true ]]; then
    echo ""
    echo "üöÄ Automatizando wizard inicial via CapRover CLI..."
    # Vari√°veis de ambiente esperadas
    ADMIN_PASS="${CAPROVER_ADMIN_PASS:-changeme123}"
    ROOT_DOMAIN="${CAPROVER_ROOT_DOMAIN:-example.com}"
    ADMIN_EMAIL="${CAPROVER_ADMIN_EMAIL:-admin@example.com}"
    # Executa setup automatizado
    caprover serversetup \
      --caproverUrl "http://$IP_PUBLICO:3000" \
      --rootDomain "$ROOT_DOMAIN" \
      --adminPassword "$ADMIN_PASS" \
      --emailAddress "$ADMIN_EMAIL" \
      --newPassword "$ADMIN_PASS" \
      --skipVerifySsl
    SETUP_EXIT=$?
    if [ $SETUP_EXIT -eq 0 ]; then
        echo "‚úÖ Wizard inicial CapRover conclu√≠do com sucesso via CLI!"
        echo "  - Dom√≠nio configurado: $ROOT_DOMAIN"
        echo "  - Usu√°rio admin: $ADMIN_EMAIL"
        echo "  - Senha: $ADMIN_PASS"
    else
        echo "üõë Falha ao executar wizard inicial via CLI. Verifique logs acima e tente manualmente via navegador."
    fi
else
    echo "‚ö†Ô∏è CapRover n√£o est√° ativo, wizard CLI n√£o ser√° executado."
fi

# 24. Relat√≥rio final
END_TIME=$(date '+%Y-%m-%d %H:%M:%S')
echo ""
echo "üìù Relat√≥rio Final:"
echo "  - In√≠cio: $START_TIME"
echo "  - Fim:   $END_TIME"
echo "  - IP P√∫blico: $IP_PUBLICO"
echo "  - Portas validadas: ${PORTAS[*]}"
echo ""
if [ "$PORTA_OK" = true ]; then
    echo "== ‚úÖ Finalizado com sucesso. Acesse: http://$IP_PUBLICO:3000 =="
else
    echo "== ‚ùå Finalizado, mas o CapRover n√£o est√° acess√≠vel na porta 3000. Verifique os logs acima. =="
fi